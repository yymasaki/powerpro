<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.TechnicalSkillMapper" >
  <resultMap id="BaseResultMap" type="com.example.domain.TechnicalSkill" >
    <id column="technical_skill_id" property="technicalSkillId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="category" property="category" jdbcType="INTEGER" />
    <result column="request_user_id" property="requestUserId" jdbcType="INTEGER" />
    <result column="stage" property="stage" jdbcType="CHAR" />
    <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updater" property="updater" jdbcType="VARCHAR" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    <result column="version" property="version" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
   <sql id="Base_Column_List" >
   		technical_skill_id, name,category,request_user_id,stage,creator, created_at, updater,updated_at,version
   </sql>
  <sql id="TechnicalSkills_Column_List" >
    t.technical_skill_id AS t_technical_skill_id, t.name AS t_name, t.category AS t_category, t.request_user_id AS t_request_user_id, 
    t.stage AS t_stage, t.creator AS t_creator, t.created_at AS t_created_at, t.updater AS t_updater, t.updated_at AS t_updated_at, t.version AS t_version
  </sql>
  <sql id="Users_Column_List">
  	u.user_id as u_user_id, u.name as u_name, u.hired_on as u_hired_on, u.department_id as u_department_id,
  	u.email as u_email,u.password as u_password,u.stage as u_stage,u.creator as u_creator, u.created_at u_created_at, u.updater as u_updater, u.updated_at as u_updated_at, u.version as u_version
  </sql>
  <sql id="Departments_Column_List">
  	d.department_id as d_department_id, d.name as d_name, d.staff_id as d_staff_id ,d.stage as d_stage,d.creator as d_creator, d.created_at d_created_at, d.updater as d_updater, d.updated_at as d_updated_at, d.version as d_version
  </sql>  
 
<select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.example.TechnicalSkillExample" > 
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from technical_skills
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
  <select id="selectByStageAndApplicant" resultMap="technicalSkillResult">
  	select
	<include refid="TechnicalSkills_Column_List" />,
    <include refid="Users_Column_List" />,
    <include refid="Departments_Column_List" />
    from technical_skills t
  	inner join users u on t.request_user_id = u.user_id
  	inner join departments d on u.department_id = d.department_id
	where t.stage = #{stage,jdbcType=INTEGER} and t.creator like CONCAT('%',#{applicant,jdbcType=VARCHAR},'%')
    order by t.technical_skill_id
    limit 20 offset #{startNumber,jdbcType=INTEGER}
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from technical_skills
    where technical_skill_id = #{technicalSkillId,jdbcType=INTEGER}
  </select>
  
    <!--申請者ユーザIDからテクニカルスキル、ユーザ、部署情報を取得する -->	
 <select id="selectByTechnicalSkillId" resultMap="technicalSkillResult">	
	select
	<include refid="TechnicalSkills_Column_List" />,
    <include refid="Users_Column_List" />,
    <include refid="Departments_Column_List" />
FROM technical_skills t
LEFT JOIN users u
ON t.request_user_id =u.user_id
LEFT JOIN departments d
ON u.department_id=d.department_id
WHERE t.technical_skill_id=#{technicalSkillId,jdbcType=INTEGER}	
</select>	
 <resultMap type="com.example.domain.TechnicalSkill" id="technicalSkillResult">	
     <id column="t_technical_skill_id" property="technicalSkillId" />	
    <result column="t_name" property="name" />	
    <result column="t_category" property="category" />	
    <result column="t_request_user_id" property="requestUserId" />	
    <result column="t_stage" property="stage" />	
    <result column="t_creator" property="creator" />	
    <result column="t_created_at" property="createdAt" />	
    <result column="t_updater" property="updater" />	
    <result column="t_updated_at" property="updatedAt" />	
    <result column="t_version" property="version" />	
<association property="user" javaType="com.example.domain.User">	
	<result column="u_user_id" property="userId"/>
	<result column="u_name" property="name"/>
	<result column="u_hired_on" property="hiredOn"/>
	<result column="u_department_id" property="departmentId"/>
	<result column="u_email" property="email"/>
	<result column="u_password" property="password"/>
    <result column="u_stage" property="stage" />	
	<result column="u_updated_password_at" property="updatedPasswordAt"/>
	<result column="u_creator" property="creator"/>
	<result column="u_created_at" property="createdAt"/>
	<result column="u_updater" property="updater"/>
	<result column="u_updated_at" property="updatedAt"/>
	<result column="u_version" property="version"/>
	<association property="department" javaType="com.example.domain.Department">
		<result column="d_department_id" property="departmentId"/>					
		<result column="d_name" property="name"/>					
		<result column="d_staff_id" property="staffId"/>					
		<result column="d_stage" property="stage"/>					
		<result column="d_creator" property="creator"/>					
		<result column="d_created_at" property="createdAt"/>					
		<result column="d_updater" property="updater"/>					
		<result column="d_updated_at" property="updatedAt"/>					
		<result column="d_version" property="version"/>					
	</association>						
</association>							
 </resultMap>							
   
  <!--テクニカルスキルIDリスト、バージョンリストからテクニカルスキルリストを取得する  -->
  <select id="selectByTechinicalSkillIdListAndVersionList" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from technical_skills
    where technical_skill_id in
     <foreach item="technical_skill_id" collection="technicalSkillIdList" open="(" separator="," close=")">
      #{technical_skill_id,jdbcType=INTEGER}
    </foreach>
    and version in
     <foreach item="version" collection="versionList" open="(" separator="," close=")">
      #{version,jdbcType=INTEGER}
    </foreach>
    order by technical_skill_id
    </select>
    
  <select id="selectBySpecsheetIdAndUserIdAndStage" resultMap="BaseResultMap">
    select
  	  <include refid="Base_Column_List" />
  	from technical_skills
  	where (technical_skill_id in
  	  (select technical_skill_id from used_technical_skills where dev_experience_id in 
		(select dev_experience_id from dev_experiences where specsheet_id = #{specsheetId,jdbcType=INTEGER}))
	or technical_skill_id in 
	  (select technical_skill_id from had_technical_skills where user_id = #{userId,jdbcType=INTEGER} and stage = 0))
	and stage in 
      <foreach item="stage" collection="specStageList" open="(" separator="," close=")">
        #{stage,jdbcType=CHAR}
      </foreach>
    order by technical_skill_id;
  </select>
     
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from technical_skills
    where technical_skill_id = #{technicalSkillId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.example.TechnicalSkillExample" >
    delete from technical_skills
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insertSelective" parameterType="com.example.domain.TechnicalSkill" >
    insert into technical_skills
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="technicalSkillId != null" >
        technical_skill_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="category != null" >
        category,
      </if>
      <if test="requestUserId != null" >
        request_user_id,
      </if>
      <if test="stage != null" >
        stage,
      </if>
      <if test="creator != null" >
        creator,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updater != null" >
        updater,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
      <if test="version != null" >
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="technicalSkillId != null" >
        #{technicalSkillId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="category != null" >
        #{category,jdbcType=INTEGER},
      </if>
      <if test="requestUserId != null" >
        #{requestUserId,jdbcType=INTEGER},
      </if>
      <if test="stage != null" >
        #{stage,jdbcType=CHAR},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updater != null" >
        #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  
    <!--追加、複数行一括挿入 -->
  <insert id="insertTechnicalSkillList" useGeneratedKeys="true" keyProperty="technicalSkillId">
  	insert into technical_skills (name,category,stage,request_user_id,creator, created_at, updater,updated_at,version) values
  	<foreach item="t" collection="technicalSkillList" separator=",">
    (#{t.name}, #{t.category}, #{t.stage}, #{t.requestUserId},#{t.creator},#{t.createdAt},#{t.updater},#{t.updatedAt},
    #{t.version})
  	</foreach>
 	</insert> 	
 	
 	<insert id="insertByHadTechnicalSkillList">
    insert into technical_skills 
    (name, category, request_user_id, stage, creator, created_at, updater, updated_at, version)values 
     <foreach collection="forAddTechnicalSkillList" item="fa" separator=",">
    ( #{fa.technicalSkill.name,jdbcType=VARCHAR}, #{fa.technicalSkill.category,jdbcType=INTEGER}, 
      #{fa.userId,jdbcType=INTEGER}, #{fa.stage,jdbcType=CHAR}, (select name from users where user_id=#{fa.userId,jdbcType=INTEGER}), 
      #{fa.createdAt,jdbcType=TIMESTAMP}, (select name from users where user_id=#{fa.userId,jdbcType=INTEGER}), #{fa.updatedAt,jdbcType=TIMESTAMP}, 
      #{fa.version,jdbcType=INTEGER})
      </foreach>
  </insert>
  
  <select id="countByExample" parameterType="com.example.example.TechnicalSkillExample" resultType="java.lang.Integer" >
    select count(*) from technical_skills
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExampleSelective" parameterType="map" >
    update technical_skills
    <set >
      <if test="record.technicalSkillId != null" >
        technical_skill_id = #{record.technicalSkillId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.category != null" >
        category = #{record.category,jdbcType=INTEGER},
      </if>
      <if test="record.requestUserId != null" >
        request_user_id = #{record.requestUserId,jdbcType=INTEGER},
      </if>
      <if test="record.stage != null" >
        stage = #{record.stage,jdbcType=CHAR},
      </if>
      <if test="record.creator != null" >
        creator = #{record.creator,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null" >
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updater != null" >
        updater = #{record.updater,jdbcType=VARCHAR},
      </if>
      <if test="record.updatedAt != null" >
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.version != null" >
        version = #{record.version,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExample" parameterType="map" >
    update technical_skills
    set technical_skill_id = #{record.technicalSkillId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      category = #{record.category,jdbcType=INTEGER},
      request_user_id = #{record.requestUserId,jdbcType=INTEGER},
      stage = #{record.stage,jdbcType=CHAR},
      creator = #{record.creator,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updater = #{record.updater,jdbcType=VARCHAR},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
 
  <update id="updateByPrimaryKeySelective" parameterType="com.example.domain.TechnicalSkill" >
    update technical_skills
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="category != null" >
        category = #{category,jdbcType=INTEGER},
      </if>
      <if test="requestUserId != null" >
        request_user_id = #{requestUserId,jdbcType=INTEGER},
      </if>
      <if test="stage != null" >
        stage = #{stage,jdbcType=CHAR},
      </if>
      <if test="creator != null" >
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updater != null" >
        updater = #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null" >
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where technical_skill_id = #{technicalSkillId,jdbcType=INTEGER}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.example.domain.TechnicalSkill" >
    update technical_skills
    set name = #{name,jdbcType=VARCHAR},
      category = #{category,jdbcType=INTEGER},
      request_user_id = #{requestUserId,jdbcType=INTEGER},
      stage = #{stage,jdbcType=CHAR},
      creator = #{creator,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updater = #{updater,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=INTEGER}
    where technical_skill_id = #{technicalSkillId,jdbcType=INTEGER}
  </update>
  
  <update id="updateRequestUserIdAndStageByPrimaryKeyAsList">
    update technical_skills
    set request_user_id = #{requestUserId,jdbcType=INTEGER},
      stage = #{stage,jdbcType=CHAR},
      updater = #{updater,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      version = version + 1
    where 
      <foreach item="t" collection="technicalSkillList" separator="OR ">
        (technical_skill_id = #{t.technicalSkillId,jdbcType=INTEGER} 
          AND stage != 9) 
      </foreach>
  </update>
  
  <!-- stage1のテクニカルスキルのステージを更新する-->
  <update id="updateByNameAndCategoryAndStage">
    update technical_skills
     set stage = #{setStage,jdbcType=CHAR},
      updater = (select name from users where user_id=#{record.userId,jdbcType=INTEGER}),
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      version = (select version from(select version from technical_skills where name = #{record.technicalSkill.name,jdbcType=VARCHAR} and category = #{record.technicalSkill.category,jdbcType=INTEGER} and stage=1)as tmp)+1
    where name = #{record.technicalSkill.name,jdbcType=VARCHAR} and category = #{record.technicalSkill.category,jdbcType=INTEGER} 
    and version=(select version from(select version from technical_skills where name = #{record.technicalSkill.name,jdbcType=VARCHAR} and category = #{record.technicalSkill.category,jdbcType=INTEGER} and stage=1)as tmp) and stage = 1 
  </update>
  
  <!--名前とカテゴリーでテクニカルスキルを更新する-->
   <update id="updateByNameAndCategory">
    update technical_skills
     set stage = #{setStage,jdbcType=CHAR},
      updater = (select name from users where user_id=#{record.userId,jdbcType=INTEGER}),
      updated_at = #{record.technicalSkill.updatedAt,jdbcType=TIMESTAMP},
      version = #{record.technicalSkill.version,jdbcType=INTEGER}+1
    where name = #{record.technicalSkill.name,jdbcType=VARCHAR} and category = #{record.technicalSkill.category,jdbcType=INTEGER}  and version=#{record.technicalSkill.version,jdbcType=INTEGER}
  </update> 
  
  <!-- ステージを複数件更新する -->
  <update id="updateStageByPrimaryKeyAsList">
    update technical_skills
    set stage = #{stage,jdbcType=CHAR},
      updater = #{updater,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      version = version + 1
    where 
      <foreach item="t" collection="technicalSkillList" separator="OR ">
        (technical_skill_id = #{t.technicalSkillId,jdbcType=INTEGER} 
          AND version = #{t.version,jdbcType=INTEGER}) 
      </foreach>
  </update>
 
</mapper>
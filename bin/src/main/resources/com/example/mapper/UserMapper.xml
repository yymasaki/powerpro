<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.domain.User">
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="hired_on" property="hiredOn" jdbcType="DATE" />
    <result column="department_id" property="departmentId" jdbcType="INTEGER" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="CHAR" />
    <result column="selected_template_id" property="selectedTemplateId" jdbcType="INTEGER" />
    <result column="stage" property="stage" jdbcType="CHAR" />
    <result column="updated_password_at" property="updatedPasswordAt" jdbcType="DATE" />
     <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updater" property="updater" jdbcType="VARCHAR" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    <result column="version" property="version" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="ContainDepartmentResultMap" type="com.example.domain.User">
    <id column="u_user_id" property="userId" jdbcType="INTEGER" />
    <result column="u_name" property="name" jdbcType="VARCHAR" />
    <result column="u_hired_on" property="hiredOn" jdbcType="DATE" />
    <result column="u_department_id" property="departmentId" jdbcType="INTEGER" />
    <result column="u_email" property="email" jdbcType="VARCHAR" />
    <result column="u_password" property="password" jdbcType="CHAR" />
    <result column="u_selected_template_id" property="selectedTemplateId" jdbcType="INTEGER" />
    <result column="u_stage" property="stage" jdbcType="CHAR" />
    <result column="u_updated_password_at" property="updatedPasswordAt" jdbcType="DATE" />
     <result column="u_creator" property="creator" jdbcType="VARCHAR" />
    <result column="u_created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="u_updater" property="updater" jdbcType="VARCHAR" />
    <result column="u_updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    <result column="u_version" property="version" jdbcType="INTEGER" />
    <association property="department" javaType="com.example.domain.Department">
      <id column="d_department_id" property="departmentId" jdbcType="INTEGER" />
      <result column="d_name" property="name" jdbcType="VARCHAR" />
      <result column="d_staff_id" property="staffId" jdbcType="VARCHAR" />
      <result column="d_stage" property="stage" jdbcType="CHAR" />
      <result column="d_creator" property="creator" jdbcType="VARCHAR" />
      <result column="d_created_at" property="createdAt" jdbcType="TIMESTAMP" />
      <result column="d_updater" property="updater" jdbcType="VARCHAR" />
      <result column="d_updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
      <result column="d_version" property="version" jdbcType="INTEGER" />
    </association>
  </resultMap>
  
<!--   SQL共通部分 -->
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.stage}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.stage} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.stage} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.stage}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.stage}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.stage} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.stage} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.stage}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Base_Column_List">
   user_id,name,hired_on,department_id,email,password,selected_template_id,stage,updated_password_at,creator,created_at,updater,updated_at,version
  </sql>
  <sql id="Users_Column_List_With_Initial">
      U.user_id AS u_user_id,U.name AS u_name,U.hired_on AS u_hired_on,U.department_id AS u_department_id,
      U.email AS u_email,U.password AS u_password,U.selected_template_id AS u_selected_template_id ,U.stage AS u_stage,U.updated_password_at AS u_updated_password_at,
      U.creator AS u_creater, U.created_at AS u_created_at,U.updater AS u_updater, U.updated_at AS u_updated_at,U.version AS u_version
  </sql>
  
  <sql id="Departments_Column_List_With_Initial">
      ,D.department_id AS d_department_id, D.name AS d_name, D.staff_id AS d_staff_id, D.stage AS d_stage,
      D.creator AS d_creator, D.created_at AS d_created_at, D.updater AS d_updater, D.updated_at AS d_updated_at, D.version AS d_version
  </sql> 
  
  <sql id="Users_Table">
 	from users AS u
  </sql>
  <sql id="Departments_Table">
 	inner join departments d on u.department_id = d.department_id
  </sql>
  
  <sql id="Update_Selective_Set">
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.hiredOn != null" >
        hired_on =  #{record.hiredOn,jdbcType=DATE},
      </if>
      <if test="record.departmentId != null" >
        department_id =  #{record.departmentId,jdbcType=INTEGER},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password =  #{record.password,jdbcType=CHAR},
      </if>
     <if test="record.selectedTemplateId != null" >
        selected_template_id =  #{record.selectedTemplateId,jdbcType=INTEGER},
      </if>      
      <if test="record.stage != null" >
        stage = #{record.stage,jdbcType=CHAR},
      </if>
      <if test="record.password != null" >
        updated_password_at = now(),
      </if>
      <if test="record.creator != null" >
        creator = #{record.creator,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null" >
        created_at =  #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updater != null" >
        updater = #{record.updater,jdbcType=VARCHAR},
      </if>
        updated_at = now(),
   </sql>
<!--   end -->
  
<!-- SELECT -->
    <select id="selectAllValidUsers" parameterType="com.example.example.UserExample" resultMap="ContainDepartmentResultMap">
    SELECT
    <include refid="Users_Column_List_With_Initial" />
    <include refid="Departments_Column_List_With_Initial" />
    FROM users AS U
      JOIN departments AS D
      ON U.department_id=D.department_id
    WHERE U.stage = 0
    ORDER BY U.hired_on DESC, U.email
  </select>

    <select id="selectByExample" parameterType="com.example.example.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

    <select id="selectByPrimaryKey" resultMap="ContainDepartmentResultMap">
    SELECT
    <include refid="Users_Column_List_With_Initial" />
    <include refid="Departments_Column_List_With_Initial" />
    FROM users AS U
      JOIN departments AS D
      ON U.department_id=D.department_id
    WHERE U.user_id = #{userId}
  </select>
  
  <!--ユーザーidでユーザー情報と部署情報を取得する-->
    <select id="selectByUserId" parameterType="com.example.example.UserExample" resultMap="ContainDepartmentResultMap">
    select
    <if test="distinct">
      distinct
    </if>
   	  <include refid="Users_Column_List_With_Initial"/>	
   	  <include refid="Departments_Column_List_With_Initial"/>
  	  <include refid="Users_Table" />
      <include refid="Departments_Table"/>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  
  <select id="selectByEmailAndStage" parameterType="String" resultMap="ContainDepartmentResultMap">
    SELECT
    <include refid="Users_Column_List_With_Initial" />
    <include refid="Departments_Column_List_With_Initial" />
    FROM users AS U
      JOIN departments AS D
      ON U.department_id=D.department_id
    WHERE
       U.email=#{email} AND
       U.stage=#{stage}
    ORDER BY
       U.created_at DESC, U.email
  </select>

  <select id="selectUsersWithTechnicalSkills" resultMap="ContainDepartmentResultMap">
    SELECT
    <include refid="Users_Column_List_With_Initial" />
    <include refid="Departments_Column_List_With_Initial" />
    FROM users AS U
      JOIN departments AS D
        ON U.department_id=D.department_id
      LEFT OUTER JOIN 
       (SELECT had_technical_skill_id,user_id,technical_skill_id,stage  FROM had_technical_skills WHERE stage IN (0,1,2)) AS HD
        ON U.user_id=HD.user_id
    <where>
       U.stage = 0
      <if test="user.departmentId != null" >
       AND U.department_id = #{user.departmentId}
      </if>
      <if test="user.name != null" >
       AND U.name LIKE CONCAT('%', #{user.name} ,'%')
      </if>
      <if test="user.hiredOn != null" >
      AND U.hired_on=#{user.hiredOn}
      </if>
      <if test="skills !=null" >
      AND HD.technical_skill_id IN 
       <foreach item="skill" collection="skills" open="(" separator="," close=")">#{skill}</foreach>
      </if>
    </where> 
    GROUP BY U.user_id
    ORDER BY U.hired_on DESC, U.email
  </select>
<!-- end -->
  
<!--   INSERT -->
  <insert id="insertSelective" parameterType="com.example.domain.User" >
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="hiredOn != null" >
        hired_on,
      </if>
      <if test="departmentId != null" >
        department_id,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="stage != null" >
        stage,
      </if>
        updated_password_at,
      <if test="creator != null" >
        creator,
      </if>
        created_at,
      <if test="updater != null" >
        updater,
      </if>
        updated_at,
        version
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="hiredOn != null" >
        #{hiredOn,jdbcType=DATE},
      </if>
      <if test="departmentId != null" >
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=CHAR},
      </if>
      <if test="stage != null" >
        #{stage,jdbcType=CHAR},
      </if>
      now(),
      <if test="creator != null" >
        #{creator,jdbcType=VARCHAR},
      </if>
      now(),
      <if test="updater != null" >
        #{updater,jdbcType=VARCHAR},
      </if>
      now(),
      1
    </trim>
  </insert>
<!-- end   -->

<!-- UPDATE -->
  <update id="updateByExampleSelective" parameterType="map">
    UPDATE users
    <set>
	  <include refid="Update_Selective_Set" />
	   version = version + 1
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateNewestTemporaryUser" parameterType="map">
    UPDATE users
    <set>
      <include refid="Update_Selective_Set" />
    </set>
    WHERE updated_at =
     ( SELECT MAX(updated_at)
          FROM
           (SELECT updated_at FROM users
             WHERE stage=1 AND email=#{record.email}) AS A  )
  </update>
<!--   end -->
  <delete id="deleteByExample" parameterType="com.example.example.UserExample">
    delete from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
</mapper>